/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UsageBucket;
import com.konfigthis.client.model.UsageEvent;
import com.konfigthis.client.model.UsageSessionPublic;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsageApi
 */
@Disabled
public class UsageApiTest {

    private static UsageApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsageApi(apiClient);
    }

    /**
     * Retrieve data for an event
     *
     * Retrieve a particular event for a request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventDataTest() throws ApiException {
        String sessionId = null;
        String eventId = null;
        UsageEvent response = api.getEventData(sessionId, eventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve data for a request
     *
     * Retrieve data for a particular request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRequestDataTest() throws ApiException {
        String sessionId = null;
        UsageSessionPublic response = api.getRequestData(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * List sessions within range
     *
     * List all sessions within a time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionRangeTest() throws ApiException {
        Integer limit = null;
        Object offset = null;
        OffsetDateTime afterDate = null;
        OffsetDateTime beforeDate = null;
        List<UsageSessionPublic> response = api.getSessionRange()
                .limit(limit)
                .offset(offset)
                .afterDate(afterDate)
                .beforeDate(beforeDate)
                .execute();
        // TODO: test validations
    }

    /**
     * List aggregate account usage
     *
     * List account usage within a time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAggregateAccountUsageTest() throws ApiException {
        Integer limit = null;
        Object offset = null;
        OffsetDateTime afterDate = null;
        OffsetDateTime beforeDate = null;
        String unit = null;
        String userId = null;
        String keyId = null;
        String method = null;
        String endpoint = null;
        List<UsageBucket> response = api.listAggregateAccountUsage()
                .limit(limit)
                .offset(offset)
                .afterDate(afterDate)
                .beforeDate(beforeDate)
                .unit(unit)
                .userId(userId)
                .keyId(keyId)
                .method(method)
                .endpoint(endpoint)
                .execute();
        // TODO: test validations
    }

    /**
     * List events for a request
     *
     * List all events within a particular request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRequestEventsTest() throws ApiException {
        String sessionId = null;
        Integer limit = null;
        Object offset = null;
        OffsetDateTime afterDate = null;
        OffsetDateTime beforeDate = null;
        List<UsageEvent> response = api.listRequestEvents(sessionId)
                .limit(limit)
                .offset(offset)
                .afterDate(afterDate)
                .beforeDate(beforeDate)
                .execute();
        // TODO: test validations
    }

}
