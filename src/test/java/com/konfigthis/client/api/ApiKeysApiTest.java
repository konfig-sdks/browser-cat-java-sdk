/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.KeyPatch;
import com.konfigthis.client.model.KeyPost;
import com.konfigthis.client.model.KeyPublic;
import com.konfigthis.client.model.KeyPut;
import com.konfigthis.client.model.KeySecret;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiKeysApi
 */
@Disabled
public class ApiKeysApiTest {

    private static ApiKeysApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ApiKeysApi(apiClient);
    }

    /**
     * Create an API key
     *
     * Create a new API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        String name = null;
        String role = null;
        OffsetDateTime expiredAt = null;
        KeySecret response = api.createApiKey(name)
                .role(role)
                .expiredAt(expiredAt)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an API key
     *
     * Retrieve an API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyTest() throws ApiException {
        String keyId = null;
        KeyPublic response = api.getKey(keyId)
                .execute();
        // TODO: test validations
    }

    /**
     * List API keys
     *
     * List all API keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        List<KeyPublic> response = api.listAll()
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke an API key
     *
     * Revoke an API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeKeyTest() throws ApiException {
        String keyId = null;
        KeyPublic response = api.revokeKey(keyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an API key
     *
     * Update an API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiKeyTest() throws ApiException {
        String name = null;
        String role = null;
        OffsetDateTime expiredAt = null;
        String keyId = null;
        KeyPublic response = api.updateApiKey(name, role, expiredAt, keyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Patch an API key
     *
     * Patch an API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateKeyTest() throws ApiException {
        String keyId = null;
        String name = null;
        String role = null;
        OffsetDateTime expiredAt = null;
        KeyPublic response = api.updateKey(keyId)
                .name(name)
                .role(role)
                .expiredAt(expiredAt)
                .execute();
        // TODO: test validations
    }

}
