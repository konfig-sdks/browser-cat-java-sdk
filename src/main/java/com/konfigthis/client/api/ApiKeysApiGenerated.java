/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.KeyPatch;
import com.konfigthis.client.model.KeyPost;
import com.konfigthis.client.model.KeyPublic;
import com.konfigthis.client.model.KeyPut;
import com.konfigthis.client.model.KeySecret;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApiKeysApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiKeysApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApiKeysApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createApiKeyCall(KeyPost keyPost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyPost;

        // create path and map variables
        String localVarPath = "/auth/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiKeyValidateBeforeCall(KeyPost keyPost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyPost' is set
        if (keyPost == null) {
            throw new ApiException("Missing the required parameter 'keyPost' when calling createApiKey(Async)");
        }

        return createApiKeyCall(keyPost, _callback);

    }


    private ApiResponse<KeySecret> createApiKeyWithHttpInfo(KeyPost keyPost) throws ApiException {
        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(keyPost, null);
        Type localVarReturnType = new TypeToken<KeySecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createApiKeyAsync(KeyPost keyPost, final ApiCallback<KeySecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(keyPost, _callback);
        Type localVarReturnType = new TypeToken<KeySecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateApiKeyRequestBuilder {
        private final String name;
        private String role;
        private OffsetDateTime expiredAt;

        private CreateApiKeyRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set role
         * @param role  (optional)
         * @return CreateApiKeyRequestBuilder
         */
        public CreateApiKeyRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set expiredAt
         * @param expiredAt  (optional)
         * @return CreateApiKeyRequestBuilder
         */
        public CreateApiKeyRequestBuilder expiredAt(OffsetDateTime expiredAt) {
            this.expiredAt = expiredAt;
            return this;
        }
        
        /**
         * Build call for createApiKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KeyPost keyPost = buildBodyParams();
            return createApiKeyCall(keyPost, _callback);
        }

        private KeyPost buildBodyParams() {
            KeyPost keyPost = new KeyPost();
            keyPost.name(this.name);
            if (this.role != null)
            keyPost.role(KeyPost.RoleEnum.fromValue(this.role));
            keyPost.expiredAt(this.expiredAt);
            return keyPost;
        }

        /**
         * Execute createApiKey request
         * @return KeySecret
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public KeySecret execute() throws ApiException {
            KeyPost keyPost = buildBodyParams();
            ApiResponse<KeySecret> localVarResp = createApiKeyWithHttpInfo(keyPost);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createApiKey request with HTTP info returned
         * @return ApiResponse&lt;KeySecret&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeySecret> executeWithHttpInfo() throws ApiException {
            KeyPost keyPost = buildBodyParams();
            return createApiKeyWithHttpInfo(keyPost);
        }

        /**
         * Execute createApiKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeySecret> _callback) throws ApiException {
            KeyPost keyPost = buildBodyParams();
            return createApiKeyAsync(keyPost, _callback);
        }
    }

    /**
     * Create an API key
     * Create a new API key.
     * @param keyPost  (required)
     * @return CreateApiKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateApiKeyRequestBuilder createApiKey(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 0) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 0.");
            }

        return new CreateApiKeyRequestBuilder(name);
    }
    private okhttp3.Call getKeyCall(String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyValidateBeforeCall(String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling getKey(Async)");
        }

        return getKeyCall(keyId, _callback);

    }


    private ApiResponse<KeyPublic> getKeyWithHttpInfo(String keyId) throws ApiException {
        okhttp3.Call localVarCall = getKeyValidateBeforeCall(keyId, null);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKeyAsync(String keyId, final ApiCallback<KeyPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyValidateBeforeCall(keyId, _callback);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKeyRequestBuilder {
        private final String keyId;

        private GetKeyRequestBuilder(String keyId) {
            this.keyId = keyId;
        }

        /**
         * Build call for getKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKeyCall(keyId, _callback);
        }


        /**
         * Execute getKey request
         * @return KeyPublic
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public KeyPublic execute() throws ApiException {
            ApiResponse<KeyPublic> localVarResp = getKeyWithHttpInfo(keyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKey request with HTTP info returned
         * @return ApiResponse&lt;KeyPublic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPublic> executeWithHttpInfo() throws ApiException {
            return getKeyWithHttpInfo(keyId);
        }

        /**
         * Execute getKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPublic> _callback) throws ApiException {
            return getKeyAsync(keyId, _callback);
        }
    }

    /**
     * Retrieve an API key
     * Retrieve an API key.
     * @param keyId  (required)
     * @return GetKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetKeyRequestBuilder getKey(String keyId) throws IllegalArgumentException {
        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new GetKeyRequestBuilder(keyId);
    }
    private okhttp3.Call listAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllCall(_callback);

    }


    private ApiResponse<List<KeyPublic>> listAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<KeyPublic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(final ApiCallback<List<KeyPublic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<KeyPublic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {

        private ListAllRequestBuilder() {
        }

        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(_callback);
        }


        /**
         * Execute listAll request
         * @return List&lt;KeyPublic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<KeyPublic> execute() throws ApiException {
            ApiResponse<List<KeyPublic>> localVarResp = listAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;KeyPublic&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<KeyPublic>> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo();
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<KeyPublic>> _callback) throws ApiException {
            return listAllAsync(_callback);
        }
    }

    /**
     * List API keys
     * List all API keys.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call revokeKeyCall(String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeKeyValidateBeforeCall(String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling revokeKey(Async)");
        }

        return revokeKeyCall(keyId, _callback);

    }


    private ApiResponse<KeyPublic> revokeKeyWithHttpInfo(String keyId) throws ApiException {
        okhttp3.Call localVarCall = revokeKeyValidateBeforeCall(keyId, null);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call revokeKeyAsync(String keyId, final ApiCallback<KeyPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeKeyValidateBeforeCall(keyId, _callback);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RevokeKeyRequestBuilder {
        private final String keyId;

        private RevokeKeyRequestBuilder(String keyId) {
            this.keyId = keyId;
        }

        /**
         * Build call for revokeKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeKeyCall(keyId, _callback);
        }


        /**
         * Execute revokeKey request
         * @return KeyPublic
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public KeyPublic execute() throws ApiException {
            ApiResponse<KeyPublic> localVarResp = revokeKeyWithHttpInfo(keyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute revokeKey request with HTTP info returned
         * @return ApiResponse&lt;KeyPublic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPublic> executeWithHttpInfo() throws ApiException {
            return revokeKeyWithHttpInfo(keyId);
        }

        /**
         * Execute revokeKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPublic> _callback) throws ApiException {
            return revokeKeyAsync(keyId, _callback);
        }
    }

    /**
     * Revoke an API key
     * Revoke an API key.
     * @param keyId  (required)
     * @return RevokeKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RevokeKeyRequestBuilder revokeKey(String keyId) throws IllegalArgumentException {
        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new RevokeKeyRequestBuilder(keyId);
    }
    private okhttp3.Call updateApiKeyCall(String keyId, KeyPut keyPut, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyPut;

        // create path and map variables
        String localVarPath = "/auth/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiKeyValidateBeforeCall(String keyId, KeyPut keyPut, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling updateApiKey(Async)");
        }

        // verify the required parameter 'keyPut' is set
        if (keyPut == null) {
            throw new ApiException("Missing the required parameter 'keyPut' when calling updateApiKey(Async)");
        }

        return updateApiKeyCall(keyId, keyPut, _callback);

    }


    private ApiResponse<KeyPublic> updateApiKeyWithHttpInfo(String keyId, KeyPut keyPut) throws ApiException {
        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(keyId, keyPut, null);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateApiKeyAsync(String keyId, KeyPut keyPut, final ApiCallback<KeyPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(keyId, keyPut, _callback);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateApiKeyRequestBuilder {
        private final String name;
        private final String role;
        private final OffsetDateTime expiredAt;
        private final String keyId;

        private UpdateApiKeyRequestBuilder(String name, String role, OffsetDateTime expiredAt, String keyId) {
            this.name = name;
            this.role = role;
            this.expiredAt = expiredAt;
            this.keyId = keyId;
        }

        /**
         * Build call for updateApiKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KeyPut keyPut = buildBodyParams();
            return updateApiKeyCall(keyId, keyPut, _callback);
        }

        private KeyPut buildBodyParams() {
            KeyPut keyPut = new KeyPut();
            keyPut.name(this.name);
            if (this.role != null)
            keyPut.role(KeyPut.RoleEnum.fromValue(this.role));
            keyPut.expiredAt(this.expiredAt);
            return keyPut;
        }

        /**
         * Execute updateApiKey request
         * @return KeyPublic
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public KeyPublic execute() throws ApiException {
            KeyPut keyPut = buildBodyParams();
            ApiResponse<KeyPublic> localVarResp = updateApiKeyWithHttpInfo(keyId, keyPut);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateApiKey request with HTTP info returned
         * @return ApiResponse&lt;KeyPublic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPublic> executeWithHttpInfo() throws ApiException {
            KeyPut keyPut = buildBodyParams();
            return updateApiKeyWithHttpInfo(keyId, keyPut);
        }

        /**
         * Execute updateApiKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPublic> _callback) throws ApiException {
            KeyPut keyPut = buildBodyParams();
            return updateApiKeyAsync(keyId, keyPut, _callback);
        }
    }

    /**
     * Update an API key
     * Update an API key.
     * @param keyId  (required)
     * @param keyPut  (required)
     * @return UpdateApiKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateApiKeyRequestBuilder updateApiKey(String name, String role, OffsetDateTime expiredAt, String keyId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 0) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 0.");
            }

        if (role == null) throw new IllegalArgumentException("\"role\" is required but got null");
            

        if (expiredAt == null) throw new IllegalArgumentException("\"expiredAt\" is required but got null");
        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new UpdateApiKeyRequestBuilder(name, role, expiredAt, keyId);
    }
    private okhttp3.Call updateKeyCall(String keyId, KeyPatch keyPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyPatch;

        // create path and map variables
        String localVarPath = "/auth/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKeyValidateBeforeCall(String keyId, KeyPatch keyPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling updateKey(Async)");
        }

        // verify the required parameter 'keyPatch' is set
        if (keyPatch == null) {
            throw new ApiException("Missing the required parameter 'keyPatch' when calling updateKey(Async)");
        }

        return updateKeyCall(keyId, keyPatch, _callback);

    }


    private ApiResponse<KeyPublic> updateKeyWithHttpInfo(String keyId, KeyPatch keyPatch) throws ApiException {
        okhttp3.Call localVarCall = updateKeyValidateBeforeCall(keyId, keyPatch, null);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateKeyAsync(String keyId, KeyPatch keyPatch, final ApiCallback<KeyPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKeyValidateBeforeCall(keyId, keyPatch, _callback);
        Type localVarReturnType = new TypeToken<KeyPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateKeyRequestBuilder {
        private final String keyId;
        private String name;
        private String role;
        private OffsetDateTime expiredAt;

        private UpdateKeyRequestBuilder(String keyId) {
            this.keyId = keyId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateKeyRequestBuilder
         */
        public UpdateKeyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set role
         * @param role  (optional)
         * @return UpdateKeyRequestBuilder
         */
        public UpdateKeyRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set expiredAt
         * @param expiredAt  (optional)
         * @return UpdateKeyRequestBuilder
         */
        public UpdateKeyRequestBuilder expiredAt(OffsetDateTime expiredAt) {
            this.expiredAt = expiredAt;
            return this;
        }
        
        /**
         * Build call for updateKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KeyPatch keyPatch = buildBodyParams();
            return updateKeyCall(keyId, keyPatch, _callback);
        }

        private KeyPatch buildBodyParams() {
            KeyPatch keyPatch = new KeyPatch();
            keyPatch.name(this.name);
            if (this.role != null)
            keyPatch.role(KeyPatch.RoleEnum.fromValue(this.role));
            keyPatch.expiredAt(this.expiredAt);
            return keyPatch;
        }

        /**
         * Execute updateKey request
         * @return KeyPublic
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public KeyPublic execute() throws ApiException {
            KeyPatch keyPatch = buildBodyParams();
            ApiResponse<KeyPublic> localVarResp = updateKeyWithHttpInfo(keyId, keyPatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateKey request with HTTP info returned
         * @return ApiResponse&lt;KeyPublic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPublic> executeWithHttpInfo() throws ApiException {
            KeyPatch keyPatch = buildBodyParams();
            return updateKeyWithHttpInfo(keyId, keyPatch);
        }

        /**
         * Execute updateKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPublic> _callback) throws ApiException {
            KeyPatch keyPatch = buildBodyParams();
            return updateKeyAsync(keyId, keyPatch, _callback);
        }
    }

    /**
     * Patch an API key
     * Patch an API key.
     * @param keyId  (required)
     * @param keyPatch  (required)
     * @return UpdateKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateKeyRequestBuilder updateKey(String keyId) throws IllegalArgumentException {
        if (keyId == null) throw new IllegalArgumentException("\"keyId\" is required but got null");
            

        return new UpdateKeyRequestBuilder(keyId);
    }
}
