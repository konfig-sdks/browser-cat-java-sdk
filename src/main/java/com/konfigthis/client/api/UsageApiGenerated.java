/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.UsageBucket;
import com.konfigthis.client.model.UsageEvent;
import com.konfigthis.client.model.UsageSessionPublic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEventDataCall(String sessionId, String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/sessions/{sessionId}/events/{eventId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventDataValidateBeforeCall(String sessionId, String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getEventData(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventData(Async)");
        }

        return getEventDataCall(sessionId, eventId, _callback);

    }


    private ApiResponse<UsageEvent> getEventDataWithHttpInfo(String sessionId, String eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventDataValidateBeforeCall(sessionId, eventId, null);
        Type localVarReturnType = new TypeToken<UsageEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventDataAsync(String sessionId, String eventId, final ApiCallback<UsageEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventDataValidateBeforeCall(sessionId, eventId, _callback);
        Type localVarReturnType = new TypeToken<UsageEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventDataRequestBuilder {
        private final String sessionId;
        private final String eventId;

        private GetEventDataRequestBuilder(String sessionId, String eventId) {
            this.sessionId = sessionId;
            this.eventId = eventId;
        }

        /**
         * Build call for getEventData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventDataCall(sessionId, eventId, _callback);
        }


        /**
         * Execute getEventData request
         * @return UsageEvent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UsageEvent execute() throws ApiException {
            ApiResponse<UsageEvent> localVarResp = getEventDataWithHttpInfo(sessionId, eventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventData request with HTTP info returned
         * @return ApiResponse&lt;UsageEvent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsageEvent> executeWithHttpInfo() throws ApiException {
            return getEventDataWithHttpInfo(sessionId, eventId);
        }

        /**
         * Execute getEventData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsageEvent> _callback) throws ApiException {
            return getEventDataAsync(sessionId, eventId, _callback);
        }
    }

    /**
     * Retrieve data for an event
     * Retrieve a particular event for a request.
     * @param sessionId  (required)
     * @param eventId  (required)
     * @return GetEventDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEventDataRequestBuilder getEventData(String sessionId, String eventId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new GetEventDataRequestBuilder(sessionId, eventId);
    }
    private okhttp3.Call getRequestDataCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/sessions/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestDataValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getRequestData(Async)");
        }

        return getRequestDataCall(sessionId, _callback);

    }


    private ApiResponse<UsageSessionPublic> getRequestDataWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = getRequestDataValidateBeforeCall(sessionId, null);
        Type localVarReturnType = new TypeToken<UsageSessionPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRequestDataAsync(String sessionId, final ApiCallback<UsageSessionPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestDataValidateBeforeCall(sessionId, _callback);
        Type localVarReturnType = new TypeToken<UsageSessionPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestDataRequestBuilder {
        private final String sessionId;

        private GetRequestDataRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for getRequestData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRequestDataCall(sessionId, _callback);
        }


        /**
         * Execute getRequestData request
         * @return UsageSessionPublic
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public UsageSessionPublic execute() throws ApiException {
            ApiResponse<UsageSessionPublic> localVarResp = getRequestDataWithHttpInfo(sessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRequestData request with HTTP info returned
         * @return ApiResponse&lt;UsageSessionPublic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsageSessionPublic> executeWithHttpInfo() throws ApiException {
            return getRequestDataWithHttpInfo(sessionId);
        }

        /**
         * Execute getRequestData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsageSessionPublic> _callback) throws ApiException {
            return getRequestDataAsync(sessionId, _callback);
        }
    }

    /**
     * Retrieve data for a request
     * Retrieve data for a particular request.
     * @param sessionId  (required)
     * @return GetRequestDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestDataRequestBuilder getRequestData(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new GetRequestDataRequestBuilder(sessionId);
    }
    private okhttp3.Call getSessionRangeCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (afterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterDate", afterDate));
        }

        if (beforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeDate", beforeDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionRangeValidateBeforeCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        return getSessionRangeCall(limit, offset, afterDate, beforeDate, _callback);

    }


    private ApiResponse<List<UsageSessionPublic>> getSessionRangeWithHttpInfo(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate) throws ApiException {
        okhttp3.Call localVarCall = getSessionRangeValidateBeforeCall(limit, offset, afterDate, beforeDate, null);
        Type localVarReturnType = new TypeToken<List<UsageSessionPublic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSessionRangeAsync(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback<List<UsageSessionPublic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionRangeValidateBeforeCall(limit, offset, afterDate, beforeDate, _callback);
        Type localVarReturnType = new TypeToken<List<UsageSessionPublic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSessionRangeRequestBuilder {
        private Integer limit;
        private Object offset;
        private OffsetDateTime afterDate;
        private OffsetDateTime beforeDate;

        private GetSessionRangeRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 100)
         * @return GetSessionRangeRequestBuilder
         */
        public GetSessionRangeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return GetSessionRangeRequestBuilder
         */
        public GetSessionRangeRequestBuilder offset(Object offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set afterDate
         * @param afterDate  (optional)
         * @return GetSessionRangeRequestBuilder
         */
        public GetSessionRangeRequestBuilder afterDate(OffsetDateTime afterDate) {
            this.afterDate = afterDate;
            return this;
        }
        
        /**
         * Set beforeDate
         * @param beforeDate  (optional)
         * @return GetSessionRangeRequestBuilder
         */
        public GetSessionRangeRequestBuilder beforeDate(OffsetDateTime beforeDate) {
            this.beforeDate = beforeDate;
            return this;
        }
        
        /**
         * Build call for getSessionRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSessionRangeCall(limit, offset, afterDate, beforeDate, _callback);
        }


        /**
         * Execute getSessionRange request
         * @return List&lt;UsageSessionPublic&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<UsageSessionPublic> execute() throws ApiException {
            ApiResponse<List<UsageSessionPublic>> localVarResp = getSessionRangeWithHttpInfo(limit, offset, afterDate, beforeDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSessionRange request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UsageSessionPublic&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UsageSessionPublic>> executeWithHttpInfo() throws ApiException {
            return getSessionRangeWithHttpInfo(limit, offset, afterDate, beforeDate);
        }

        /**
         * Execute getSessionRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UsageSessionPublic>> _callback) throws ApiException {
            return getSessionRangeAsync(limit, offset, afterDate, beforeDate, _callback);
        }
    }

    /**
     * List sessions within range
     * List all sessions within a time range.
     * @return GetSessionRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSessionRangeRequestBuilder getSessionRange() throws IllegalArgumentException {
        return new GetSessionRangeRequestBuilder();
    }
    private okhttp3.Call listAggregateAccountUsageCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, String unit, String userId, String keyId, String method, String endpoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/buckets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (afterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterDate", afterDate));
        }

        if (beforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeDate", beforeDate));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (keyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyId", keyId));
        }

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        if (endpoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint", endpoint));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAggregateAccountUsageValidateBeforeCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, String unit, String userId, String keyId, String method, String endpoint, final ApiCallback _callback) throws ApiException {
        return listAggregateAccountUsageCall(limit, offset, afterDate, beforeDate, unit, userId, keyId, method, endpoint, _callback);

    }


    private ApiResponse<List<UsageBucket>> listAggregateAccountUsageWithHttpInfo(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, String unit, String userId, String keyId, String method, String endpoint) throws ApiException {
        okhttp3.Call localVarCall = listAggregateAccountUsageValidateBeforeCall(limit, offset, afterDate, beforeDate, unit, userId, keyId, method, endpoint, null);
        Type localVarReturnType = new TypeToken<List<UsageBucket>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAggregateAccountUsageAsync(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, String unit, String userId, String keyId, String method, String endpoint, final ApiCallback<List<UsageBucket>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAggregateAccountUsageValidateBeforeCall(limit, offset, afterDate, beforeDate, unit, userId, keyId, method, endpoint, _callback);
        Type localVarReturnType = new TypeToken<List<UsageBucket>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAggregateAccountUsageRequestBuilder {
        private Integer limit;
        private Object offset;
        private OffsetDateTime afterDate;
        private OffsetDateTime beforeDate;
        private String unit;
        private String userId;
        private String keyId;
        private String method;
        private String endpoint;

        private ListAggregateAccountUsageRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 100)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder offset(Object offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set afterDate
         * @param afterDate  (optional)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder afterDate(OffsetDateTime afterDate) {
            this.afterDate = afterDate;
            return this;
        }
        
        /**
         * Set beforeDate
         * @param beforeDate  (optional)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder beforeDate(OffsetDateTime beforeDate) {
            this.beforeDate = beforeDate;
            return this;
        }
        
        /**
         * Set unit
         * @param unit  (optional)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder unit(String unit) {
            this.unit = unit;
            return this;
        }
        
        /**
         * Set userId
         * @param userId  (optional)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set keyId
         * @param keyId  (optional)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder keyId(String keyId) {
            this.keyId = keyId;
            return this;
        }
        
        /**
         * Set method
         * @param method  (optional)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder method(String method) {
            this.method = method;
            return this;
        }
        
        /**
         * Set endpoint
         * @param endpoint  (optional)
         * @return ListAggregateAccountUsageRequestBuilder
         */
        public ListAggregateAccountUsageRequestBuilder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        
        /**
         * Build call for listAggregateAccountUsage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAggregateAccountUsageCall(limit, offset, afterDate, beforeDate, unit, userId, keyId, method, endpoint, _callback);
        }


        /**
         * Execute listAggregateAccountUsage request
         * @return List&lt;UsageBucket&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<UsageBucket> execute() throws ApiException {
            ApiResponse<List<UsageBucket>> localVarResp = listAggregateAccountUsageWithHttpInfo(limit, offset, afterDate, beforeDate, unit, userId, keyId, method, endpoint);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAggregateAccountUsage request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UsageBucket&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UsageBucket>> executeWithHttpInfo() throws ApiException {
            return listAggregateAccountUsageWithHttpInfo(limit, offset, afterDate, beforeDate, unit, userId, keyId, method, endpoint);
        }

        /**
         * Execute listAggregateAccountUsage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UsageBucket>> _callback) throws ApiException {
            return listAggregateAccountUsageAsync(limit, offset, afterDate, beforeDate, unit, userId, keyId, method, endpoint, _callback);
        }
    }

    /**
     * List aggregate account usage
     * List account usage within a time range.
     * @return ListAggregateAccountUsageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAggregateAccountUsageRequestBuilder listAggregateAccountUsage() throws IllegalArgumentException {
        return new ListAggregateAccountUsageRequestBuilder();
    }
    private okhttp3.Call listRequestEventsCall(String sessionId, Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/sessions/{sessionId}/events"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (afterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterDate", afterDate));
        }

        if (beforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeDate", beforeDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRequestEventsValidateBeforeCall(String sessionId, Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling listRequestEvents(Async)");
        }

        return listRequestEventsCall(sessionId, limit, offset, afterDate, beforeDate, _callback);

    }


    private ApiResponse<List<UsageEvent>> listRequestEventsWithHttpInfo(String sessionId, Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate) throws ApiException {
        okhttp3.Call localVarCall = listRequestEventsValidateBeforeCall(sessionId, limit, offset, afterDate, beforeDate, null);
        Type localVarReturnType = new TypeToken<List<UsageEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRequestEventsAsync(String sessionId, Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback<List<UsageEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRequestEventsValidateBeforeCall(sessionId, limit, offset, afterDate, beforeDate, _callback);
        Type localVarReturnType = new TypeToken<List<UsageEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestEventsRequestBuilder {
        private final String sessionId;
        private Integer limit;
        private Object offset;
        private OffsetDateTime afterDate;
        private OffsetDateTime beforeDate;

        private ListRequestEventsRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Set limit
         * @param limit  (optional, default to 100)
         * @return ListRequestEventsRequestBuilder
         */
        public ListRequestEventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return ListRequestEventsRequestBuilder
         */
        public ListRequestEventsRequestBuilder offset(Object offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set afterDate
         * @param afterDate  (optional)
         * @return ListRequestEventsRequestBuilder
         */
        public ListRequestEventsRequestBuilder afterDate(OffsetDateTime afterDate) {
            this.afterDate = afterDate;
            return this;
        }
        
        /**
         * Set beforeDate
         * @param beforeDate  (optional)
         * @return ListRequestEventsRequestBuilder
         */
        public ListRequestEventsRequestBuilder beforeDate(OffsetDateTime beforeDate) {
            this.beforeDate = beforeDate;
            return this;
        }
        
        /**
         * Build call for listRequestEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRequestEventsCall(sessionId, limit, offset, afterDate, beforeDate, _callback);
        }


        /**
         * Execute listRequestEvents request
         * @return List&lt;UsageEvent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<UsageEvent> execute() throws ApiException {
            ApiResponse<List<UsageEvent>> localVarResp = listRequestEventsWithHttpInfo(sessionId, limit, offset, afterDate, beforeDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRequestEvents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UsageEvent&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UsageEvent>> executeWithHttpInfo() throws ApiException {
            return listRequestEventsWithHttpInfo(sessionId, limit, offset, afterDate, beforeDate);
        }

        /**
         * Execute listRequestEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UsageEvent>> _callback) throws ApiException {
            return listRequestEventsAsync(sessionId, limit, offset, afterDate, beforeDate, _callback);
        }
    }

    /**
     * List events for a request
     * List all events within a particular request.
     * @param sessionId  (required)
     * @return ListRequestEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestEventsRequestBuilder listRequestEvents(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new ListRequestEventsRequestBuilder(sessionId);
    }
}
