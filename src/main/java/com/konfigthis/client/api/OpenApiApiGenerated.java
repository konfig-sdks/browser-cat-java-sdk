/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OpenApiGetSpecJsonResponse;
import com.konfigthis.client.model.OpenApiGetYamlSpecResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OpenApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OpenApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OpenApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call exploreFunctionalityCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exploreFunctionalityValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return exploreFunctionalityCall(_callback);

    }


    private ApiResponse<String> exploreFunctionalityWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = exploreFunctionalityValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exploreFunctionalityAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = exploreFunctionalityValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExploreFunctionalityRequestBuilder {

        private ExploreFunctionalityRequestBuilder() {
        }

        /**
         * Build call for exploreFunctionality
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI HTML </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exploreFunctionalityCall(_callback);
        }


        /**
         * Execute exploreFunctionality request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI HTML </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = exploreFunctionalityWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exploreFunctionality request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI HTML </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return exploreFunctionalityWithHttpInfo();
        }

        /**
         * Execute exploreFunctionality request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI HTML </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return exploreFunctionalityAsync(_callback);
        }
    }

    /**
     * Open OpenAPI docs
     * Open OpenAPI docs explorer. Easily explore functionality, request formats, and response types.
     * @return ExploreFunctionalityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI HTML </td><td>  -  </td></tr>
     </table>
     */
    public ExploreFunctionalityRequestBuilder exploreFunctionality() throws IllegalArgumentException {
        return new ExploreFunctionalityRequestBuilder();
    }
    private okhttp3.Call getSpecJsonCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecJsonValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSpecJsonCall(_callback);

    }


    private ApiResponse<OpenApiGetSpecJsonResponse> getSpecJsonWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSpecJsonValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OpenApiGetSpecJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecJsonAsync(final ApiCallback<OpenApiGetSpecJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecJsonValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OpenApiGetSpecJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecJsonRequestBuilder {

        private GetSpecJsonRequestBuilder() {
        }

        /**
         * Build call for getSpecJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI JSON </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecJsonCall(_callback);
        }


        /**
         * Execute getSpecJson request
         * @return OpenApiGetSpecJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI JSON </td><td>  -  </td></tr>
         </table>
         */
        public OpenApiGetSpecJsonResponse execute() throws ApiException {
            ApiResponse<OpenApiGetSpecJsonResponse> localVarResp = getSpecJsonWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecJson request with HTTP info returned
         * @return ApiResponse&lt;OpenApiGetSpecJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI JSON </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OpenApiGetSpecJsonResponse> executeWithHttpInfo() throws ApiException {
            return getSpecJsonWithHttpInfo();
        }

        /**
         * Execute getSpecJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI JSON </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OpenApiGetSpecJsonResponse> _callback) throws ApiException {
            return getSpecJsonAsync(_callback);
        }
    }

    /**
     * Retrieve API spec as JSON
     * Retrieve API spec in JSON format. Use this format to generate types, clients, and mocks in your language of choice.
     * @return GetSpecJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI JSON </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecJsonRequestBuilder getSpecJson() throws IllegalArgumentException {
        return new GetSpecJsonRequestBuilder();
    }
    private okhttp3.Call getYamlSpecCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi.yaml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/x-yaml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getYamlSpecValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getYamlSpecCall(_callback);

    }


    private ApiResponse<OpenApiGetYamlSpecResponse> getYamlSpecWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getYamlSpecValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OpenApiGetYamlSpecResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getYamlSpecAsync(final ApiCallback<OpenApiGetYamlSpecResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getYamlSpecValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OpenApiGetYamlSpecResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetYamlSpecRequestBuilder {

        private GetYamlSpecRequestBuilder() {
        }

        /**
         * Build call for getYamlSpec
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI YAML </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getYamlSpecCall(_callback);
        }


        /**
         * Execute getYamlSpec request
         * @return OpenApiGetYamlSpecResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI YAML </td><td>  -  </td></tr>
         </table>
         */
        public OpenApiGetYamlSpecResponse execute() throws ApiException {
            ApiResponse<OpenApiGetYamlSpecResponse> localVarResp = getYamlSpecWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getYamlSpec request with HTTP info returned
         * @return ApiResponse&lt;OpenApiGetYamlSpecResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI YAML </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OpenApiGetYamlSpecResponse> executeWithHttpInfo() throws ApiException {
            return getYamlSpecWithHttpInfo();
        }

        /**
         * Execute getYamlSpec request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OpenAPI YAML </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OpenApiGetYamlSpecResponse> _callback) throws ApiException {
            return getYamlSpecAsync(_callback);
        }
    }

    /**
     * Retrieve API spec as YAML
     * Retrieve API spec in YAML format. Use this format to generate types, clients, and mocks in your language of choice.
     * @return GetYamlSpecRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OpenAPI YAML </td><td>  -  </td></tr>
     </table>
     */
    public GetYamlSpecRequestBuilder getYamlSpec() throws IllegalArgumentException {
        return new GetYamlSpecRequestBuilder();
    }
}
