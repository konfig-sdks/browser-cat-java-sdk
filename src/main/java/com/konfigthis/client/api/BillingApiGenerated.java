/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.Invoice;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Subscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BillingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BillingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getActiveSubscriptionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/subscriptions/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveSubscriptionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getActiveSubscriptionCall(_callback);

    }


    private ApiResponse<Subscription> getActiveSubscriptionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getActiveSubscriptionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getActiveSubscriptionAsync(final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveSubscriptionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetActiveSubscriptionRequestBuilder {

        private GetActiveSubscriptionRequestBuilder() {
        }

        /**
         * Build call for getActiveSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActiveSubscriptionCall(_callback);
        }


        /**
         * Execute getActiveSubscription request
         * @return Subscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Subscription execute() throws ApiException {
            ApiResponse<Subscription> localVarResp = getActiveSubscriptionWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getActiveSubscription request with HTTP info returned
         * @return ApiResponse&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Subscription> executeWithHttpInfo() throws ApiException {
            return getActiveSubscriptionWithHttpInfo();
        }

        /**
         * Execute getActiveSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Subscription> _callback) throws ApiException {
            return getActiveSubscriptionAsync(_callback);
        }
    }

    /**
     * Get active subscription
     * Get the primary, active subscription.
     * @return GetActiveSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetActiveSubscriptionRequestBuilder getActiveSubscription() throws IllegalArgumentException {
        return new GetActiveSubscriptionRequestBuilder();
    }
    private okhttp3.Call getInvoicePdfCall(String invId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/invoices/{invId}.pdf"
            .replace("{" + "invId" + "}", localVarApiClient.escapeString(invId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoicePdfValidateBeforeCall(String invId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invId' is set
        if (invId == null) {
            throw new ApiException("Missing the required parameter 'invId' when calling getInvoicePdf(Async)");
        }

        return getInvoicePdfCall(invId, _callback);

    }


    private ApiResponse<File> getInvoicePdfWithHttpInfo(String invId) throws ApiException {
        okhttp3.Call localVarCall = getInvoicePdfValidateBeforeCall(invId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoicePdfAsync(String invId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoicePdfValidateBeforeCall(invId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInvoicePdfRequestBuilder {
        private final String invId;

        private GetInvoicePdfRequestBuilder(String invId) {
            this.invId = invId;
        }

        /**
         * Build call for getInvoicePdf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoicePdfCall(invId, _callback);
        }


        /**
         * Execute getInvoicePdf request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getInvoicePdfWithHttpInfo(invId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInvoicePdf request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getInvoicePdfWithHttpInfo(invId);
        }

        /**
         * Execute getInvoicePdf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getInvoicePdfAsync(invId, _callback);
        }
    }

    /**
     * Get PDF receipt for specific invoice
     * Get specific invoice PDF.
     * @param invId  (required)
     * @return GetInvoicePdfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetInvoicePdfRequestBuilder getInvoicePdf(String invId) throws IllegalArgumentException {
        if (invId == null) throw new IllegalArgumentException("\"invId\" is required but got null");
            

        return new GetInvoicePdfRequestBuilder(invId);
    }
    private okhttp3.Call getSpecificInvoiceCall(String invId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/invoices/{invId}"
            .replace("{" + "invId" + "}", localVarApiClient.escapeString(invId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificInvoiceValidateBeforeCall(String invId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invId' is set
        if (invId == null) {
            throw new ApiException("Missing the required parameter 'invId' when calling getSpecificInvoice(Async)");
        }

        return getSpecificInvoiceCall(invId, _callback);

    }


    private ApiResponse<Invoice> getSpecificInvoiceWithHttpInfo(String invId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificInvoiceValidateBeforeCall(invId, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificInvoiceAsync(String invId, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificInvoiceValidateBeforeCall(invId, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificInvoiceRequestBuilder {
        private final String invId;

        private GetSpecificInvoiceRequestBuilder(String invId) {
            this.invId = invId;
        }

        /**
         * Build call for getSpecificInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificInvoiceCall(invId, _callback);
        }


        /**
         * Execute getSpecificInvoice request
         * @return Invoice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Invoice execute() throws ApiException {
            ApiResponse<Invoice> localVarResp = getSpecificInvoiceWithHttpInfo(invId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificInvoice request with HTTP info returned
         * @return ApiResponse&lt;Invoice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Invoice> executeWithHttpInfo() throws ApiException {
            return getSpecificInvoiceWithHttpInfo(invId);
        }

        /**
         * Execute getSpecificInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Invoice> _callback) throws ApiException {
            return getSpecificInvoiceAsync(invId, _callback);
        }
    }

    /**
     * Get specific invoice
     * Get specific invoice info.
     * @param invId  (required)
     * @return GetSpecificInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificInvoiceRequestBuilder getSpecificInvoice(String invId) throws IllegalArgumentException {
        if (invId == null) throw new IllegalArgumentException("\"invId\" is required but got null");
            

        return new GetSpecificInvoiceRequestBuilder(invId);
    }
    private okhttp3.Call getSpecificSubscriptionCall(String subId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/subscriptions/{subId}"
            .replace("{" + "subId" + "}", localVarApiClient.escapeString(subId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificSubscriptionValidateBeforeCall(String subId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subId' is set
        if (subId == null) {
            throw new ApiException("Missing the required parameter 'subId' when calling getSpecificSubscription(Async)");
        }

        return getSpecificSubscriptionCall(subId, _callback);

    }


    private ApiResponse<Subscription> getSpecificSubscriptionWithHttpInfo(String subId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificSubscriptionValidateBeforeCall(subId, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificSubscriptionAsync(String subId, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificSubscriptionValidateBeforeCall(subId, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificSubscriptionRequestBuilder {
        private final String subId;

        private GetSpecificSubscriptionRequestBuilder(String subId) {
            this.subId = subId;
        }

        /**
         * Build call for getSpecificSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificSubscriptionCall(subId, _callback);
        }


        /**
         * Execute getSpecificSubscription request
         * @return Subscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Subscription execute() throws ApiException {
            ApiResponse<Subscription> localVarResp = getSpecificSubscriptionWithHttpInfo(subId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificSubscription request with HTTP info returned
         * @return ApiResponse&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Subscription> executeWithHttpInfo() throws ApiException {
            return getSpecificSubscriptionWithHttpInfo(subId);
        }

        /**
         * Execute getSpecificSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Subscription> _callback) throws ApiException {
            return getSpecificSubscriptionAsync(subId, _callback);
        }
    }

    /**
     * Get specific subscription
     * Get specific subscription details.
     * @param subId  (required)
     * @return GetSpecificSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificSubscriptionRequestBuilder getSpecificSubscription(String subId) throws IllegalArgumentException {
        if (subId == null) throw new IllegalArgumentException("\"subId\" is required but got null");
            

        return new GetSpecificSubscriptionRequestBuilder(subId);
    }
    private okhttp3.Call listInvoicesRangeCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (afterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterDate", afterDate));
        }

        if (beforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeDate", beforeDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvoicesRangeValidateBeforeCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        return listInvoicesRangeCall(limit, offset, afterDate, beforeDate, _callback);

    }


    private ApiResponse<List<Invoice>> listInvoicesRangeWithHttpInfo(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate) throws ApiException {
        okhttp3.Call localVarCall = listInvoicesRangeValidateBeforeCall(limit, offset, afterDate, beforeDate, null);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInvoicesRangeAsync(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback<List<Invoice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvoicesRangeValidateBeforeCall(limit, offset, afterDate, beforeDate, _callback);
        Type localVarReturnType = new TypeToken<List<Invoice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInvoicesRangeRequestBuilder {
        private Integer limit;
        private Object offset;
        private OffsetDateTime afterDate;
        private OffsetDateTime beforeDate;

        private ListInvoicesRangeRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 100)
         * @return ListInvoicesRangeRequestBuilder
         */
        public ListInvoicesRangeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return ListInvoicesRangeRequestBuilder
         */
        public ListInvoicesRangeRequestBuilder offset(Object offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set afterDate
         * @param afterDate  (optional)
         * @return ListInvoicesRangeRequestBuilder
         */
        public ListInvoicesRangeRequestBuilder afterDate(OffsetDateTime afterDate) {
            this.afterDate = afterDate;
            return this;
        }
        
        /**
         * Set beforeDate
         * @param beforeDate  (optional)
         * @return ListInvoicesRangeRequestBuilder
         */
        public ListInvoicesRangeRequestBuilder beforeDate(OffsetDateTime beforeDate) {
            this.beforeDate = beforeDate;
            return this;
        }
        
        /**
         * Build call for listInvoicesRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInvoicesRangeCall(limit, offset, afterDate, beforeDate, _callback);
        }


        /**
         * Execute listInvoicesRange request
         * @return List&lt;Invoice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Invoice> execute() throws ApiException {
            ApiResponse<List<Invoice>> localVarResp = listInvoicesRangeWithHttpInfo(limit, offset, afterDate, beforeDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInvoicesRange request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Invoice&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Invoice>> executeWithHttpInfo() throws ApiException {
            return listInvoicesRangeWithHttpInfo(limit, offset, afterDate, beforeDate);
        }

        /**
         * Execute listInvoicesRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Invoice>> _callback) throws ApiException {
            return listInvoicesRangeAsync(limit, offset, afterDate, beforeDate, _callback);
        }
    }

    /**
     * List invoices within range
     * List all invoices (including failed and refunds) within a given time range.
     * @return ListInvoicesRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListInvoicesRangeRequestBuilder listInvoicesRange() throws IllegalArgumentException {
        return new ListInvoicesRangeRequestBuilder();
    }
    private okhttp3.Call listSubscriptionsWithinRangeCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billing/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (afterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterDate", afterDate));
        }

        if (beforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeDate", beforeDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtCookie", "keyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscriptionsWithinRangeValidateBeforeCall(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback _callback) throws ApiException {
        return listSubscriptionsWithinRangeCall(limit, offset, afterDate, beforeDate, _callback);

    }


    private ApiResponse<List<Subscription>> listSubscriptionsWithinRangeWithHttpInfo(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionsWithinRangeValidateBeforeCall(limit, offset, afterDate, beforeDate, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubscriptionsWithinRangeAsync(Integer limit, Object offset, OffsetDateTime afterDate, OffsetDateTime beforeDate, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionsWithinRangeValidateBeforeCall(limit, offset, afterDate, beforeDate, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSubscriptionsWithinRangeRequestBuilder {
        private Integer limit;
        private Object offset;
        private OffsetDateTime afterDate;
        private OffsetDateTime beforeDate;

        private ListSubscriptionsWithinRangeRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional, default to 100)
         * @return ListSubscriptionsWithinRangeRequestBuilder
         */
        public ListSubscriptionsWithinRangeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return ListSubscriptionsWithinRangeRequestBuilder
         */
        public ListSubscriptionsWithinRangeRequestBuilder offset(Object offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set afterDate
         * @param afterDate  (optional)
         * @return ListSubscriptionsWithinRangeRequestBuilder
         */
        public ListSubscriptionsWithinRangeRequestBuilder afterDate(OffsetDateTime afterDate) {
            this.afterDate = afterDate;
            return this;
        }
        
        /**
         * Set beforeDate
         * @param beforeDate  (optional)
         * @return ListSubscriptionsWithinRangeRequestBuilder
         */
        public ListSubscriptionsWithinRangeRequestBuilder beforeDate(OffsetDateTime beforeDate) {
            this.beforeDate = beforeDate;
            return this;
        }
        
        /**
         * Build call for listSubscriptionsWithinRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubscriptionsWithinRangeCall(limit, offset, afterDate, beforeDate, _callback);
        }


        /**
         * Execute listSubscriptionsWithinRange request
         * @return List&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Subscription> execute() throws ApiException {
            ApiResponse<List<Subscription>> localVarResp = listSubscriptionsWithinRangeWithHttpInfo(limit, offset, afterDate, beforeDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSubscriptionsWithinRange request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Subscription>> executeWithHttpInfo() throws ApiException {
            return listSubscriptionsWithinRangeWithHttpInfo(limit, offset, afterDate, beforeDate);
        }

        /**
         * Execute listSubscriptionsWithinRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Subscription>> _callback) throws ApiException {
            return listSubscriptionsWithinRangeAsync(limit, offset, afterDate, beforeDate, _callback);
        }
    }

    /**
     * List subscriptions within range
     * List all current and previous subscriptions within a given time range.
     * @return ListSubscriptionsWithinRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsWithinRangeRequestBuilder listSubscriptionsWithinRange() throws IllegalArgumentException {
        return new ListSubscriptionsWithinRangeRequestBuilder();
    }
}
