/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Subscription
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Subscription {
  public static final String SERIALIZED_NAME_SUB_ID = "subId";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private String subId;

  /**
   * Gets or Sets tier
   */
  @JsonAdapter(TierEnum.Adapter.class)
 public enum TierEnum {
    HOBBY("hobby"),
    
    BUSINESS("business"),
    
    ENTERPRISE("enterprise");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    INCOMPLETE("incomplete"),
    
    INCOMPLETE_EXPIRED("incomplete_expired"),
    
    ACTIVE("active"),
    
    TRIALING("trialing"),
    
    PAST_DUE("past_due"),
    
    UNPAID("unpaid"),
    
    CANCELED("canceled"),
    
    PAUSED("paused");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * Gets or Sets periodUnit
   */
  @JsonAdapter(PeriodUnitEnum.Adapter.class)
 public enum PeriodUnitEnum {
    DAY("day"),
    
    WEEK("week"),
    
    MONTH("month"),
    
    YEAR("year");

    private String value;

    PeriodUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodUnitEnum fromValue(String value) {
      for (PeriodUnitEnum b : PeriodUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeriodUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodUnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PERIOD_UNIT = "periodUnit";
  @SerializedName(SERIALIZED_NAME_PERIOD_UNIT)
  private PeriodUnitEnum periodUnit;

  public static final String SERIALIZED_NAME_PERIOD_COUNT = "periodCount";
  @SerializedName(SERIALIZED_NAME_PERIOD_COUNT)
  private Integer periodCount;

  public static final String SERIALIZED_NAME_PERIOD_STARTS_AT = "periodStartsAt";
  @SerializedName(SERIALIZED_NAME_PERIOD_STARTS_AT)
  private OffsetDateTime periodStartsAt;

  public static final String SERIALIZED_NAME_PERIOD_ENDS_AT = "periodEndsAt";
  @SerializedName(SERIALIZED_NAME_PERIOD_ENDS_AT)
  private OffsetDateTime periodEndsAt;

  public static final String SERIALIZED_NAME_ANCHORED_AT = "anchoredAt";
  @SerializedName(SERIALIZED_NAME_ANCHORED_AT)
  private OffsetDateTime anchoredAt;

  public static final String SERIALIZED_NAME_CANCELED_AT = "canceledAt";
  @SerializedName(SERIALIZED_NAME_CANCELED_AT)
  private Object canceledAt = null;

  public static final String SERIALIZED_NAME_RESUMED_AT = "resumedAt";
  @SerializedName(SERIALIZED_NAME_RESUMED_AT)
  private Object resumedAt = null;

  public static final String SERIALIZED_NAME_PAUSED_AT = "pausedAt";
  @SerializedName(SERIALIZED_NAME_PAUSED_AT)
  private Object pausedAt = null;

  public static final String SERIALIZED_NAME_STRIPE_SUB_ID = "stripeSubId";
  @SerializedName(SERIALIZED_NAME_STRIPE_SUB_ID)
  private String stripeSubId;

  public static final String SERIALIZED_NAME_STRIPE_CUS_ID = "stripeCusId";
  @SerializedName(SERIALIZED_NAME_STRIPE_CUS_ID)
  private Object stripeCusId = null;

  public Subscription() {
  }

  public Subscription subId(String subId) {
    
    
    
    
    this.subId = subId;
    return this;
  }

   /**
   * Subscription ID
   * @return subId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Subscription ID")

  public String getSubId() {
    return subId;
  }


  public void setSubId(String subId) {
    
    
    
    this.subId = subId;
  }


  public Subscription tier(TierEnum tier) {
    
    
    
    
    this.tier = tier;
    return this;
  }

   /**
   * Get tier
   * @return tier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TierEnum getTier() {
    return tier;
  }


  public void setTier(TierEnum tier) {
    
    
    
    this.tier = tier;
  }


  public Subscription status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Subscription currency(String currency) {
    
    
    if (currency != null && currency.length() < 3) {
      throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 3.");
    }
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    if (currency != null && currency.length() < 3) {
      throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 3.");
    }
    this.currency = currency;
  }


  public Subscription periodUnit(PeriodUnitEnum periodUnit) {
    
    
    
    
    this.periodUnit = periodUnit;
    return this;
  }

   /**
   * Get periodUnit
   * @return periodUnit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PeriodUnitEnum getPeriodUnit() {
    return periodUnit;
  }


  public void setPeriodUnit(PeriodUnitEnum periodUnit) {
    
    
    
    this.periodUnit = periodUnit;
  }


  public Subscription periodCount(Integer periodCount) {
    if (periodCount != null && periodCount < 1) {
      throw new IllegalArgumentException("Invalid value for periodCount. Must be greater than or equal to 1.");
    }
    
    
    
    this.periodCount = periodCount;
    return this;
  }

   /**
   * Get periodCount
   * minimum: 1
   * @return periodCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPeriodCount() {
    return periodCount;
  }


  public void setPeriodCount(Integer periodCount) {
    if (periodCount != null && periodCount < 1) {
      throw new IllegalArgumentException("Invalid value for periodCount. Must be greater than or equal to 1.");
    }
    
    
    this.periodCount = periodCount;
  }


  public Subscription periodStartsAt(OffsetDateTime periodStartsAt) {
    
    
    
    
    this.periodStartsAt = periodStartsAt;
    return this;
  }

   /**
   * Get periodStartsAt
   * @return periodStartsAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getPeriodStartsAt() {
    return periodStartsAt;
  }


  public void setPeriodStartsAt(OffsetDateTime periodStartsAt) {
    
    
    
    this.periodStartsAt = periodStartsAt;
  }


  public Subscription periodEndsAt(OffsetDateTime periodEndsAt) {
    
    
    
    
    this.periodEndsAt = periodEndsAt;
    return this;
  }

   /**
   * Get periodEndsAt
   * @return periodEndsAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getPeriodEndsAt() {
    return periodEndsAt;
  }


  public void setPeriodEndsAt(OffsetDateTime periodEndsAt) {
    
    
    
    this.periodEndsAt = periodEndsAt;
  }


  public Subscription anchoredAt(OffsetDateTime anchoredAt) {
    
    
    
    
    this.anchoredAt = anchoredAt;
    return this;
  }

   /**
   * Get anchoredAt
   * @return anchoredAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getAnchoredAt() {
    return anchoredAt;
  }


  public void setAnchoredAt(OffsetDateTime anchoredAt) {
    
    
    
    this.anchoredAt = anchoredAt;
  }


  public Subscription canceledAt(Object canceledAt) {
    
    
    
    
    this.canceledAt = canceledAt;
    return this;
  }

   /**
   * Get canceledAt
   * @return canceledAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getCanceledAt() {
    return canceledAt;
  }


  public void setCanceledAt(Object canceledAt) {
    
    
    
    this.canceledAt = canceledAt;
  }


  public Subscription resumedAt(Object resumedAt) {
    
    
    
    
    this.resumedAt = resumedAt;
    return this;
  }

   /**
   * Get resumedAt
   * @return resumedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getResumedAt() {
    return resumedAt;
  }


  public void setResumedAt(Object resumedAt) {
    
    
    
    this.resumedAt = resumedAt;
  }


  public Subscription pausedAt(Object pausedAt) {
    
    
    
    
    this.pausedAt = pausedAt;
    return this;
  }

   /**
   * Get pausedAt
   * @return pausedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getPausedAt() {
    return pausedAt;
  }


  public void setPausedAt(Object pausedAt) {
    
    
    
    this.pausedAt = pausedAt;
  }


  public Subscription stripeSubId(String stripeSubId) {
    
    
    
    
    this.stripeSubId = stripeSubId;
    return this;
  }

   /**
   * Get stripeSubId
   * @return stripeSubId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStripeSubId() {
    return stripeSubId;
  }


  public void setStripeSubId(String stripeSubId) {
    
    
    
    this.stripeSubId = stripeSubId;
  }


  public Subscription stripeCusId(Object stripeCusId) {
    
    
    
    
    this.stripeCusId = stripeCusId;
    return this;
  }

   /**
   * Get stripeCusId
   * @return stripeCusId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getStripeCusId() {
    return stripeCusId;
  }


  public void setStripeCusId(Object stripeCusId) {
    
    
    
    this.stripeCusId = stripeCusId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Subscription instance itself
   */
  public Subscription putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.subId, subscription.subId) &&
        Objects.equals(this.tier, subscription.tier) &&
        Objects.equals(this.status, subscription.status) &&
        Objects.equals(this.currency, subscription.currency) &&
        Objects.equals(this.periodUnit, subscription.periodUnit) &&
        Objects.equals(this.periodCount, subscription.periodCount) &&
        Objects.equals(this.periodStartsAt, subscription.periodStartsAt) &&
        Objects.equals(this.periodEndsAt, subscription.periodEndsAt) &&
        Objects.equals(this.anchoredAt, subscription.anchoredAt) &&
        Objects.equals(this.canceledAt, subscription.canceledAt) &&
        Objects.equals(this.resumedAt, subscription.resumedAt) &&
        Objects.equals(this.pausedAt, subscription.pausedAt) &&
        Objects.equals(this.stripeSubId, subscription.stripeSubId) &&
        Objects.equals(this.stripeCusId, subscription.stripeCusId)&&
        Objects.equals(this.additionalProperties, subscription.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subId, tier, status, currency, periodUnit, periodCount, periodStartsAt, periodEndsAt, anchoredAt, canceledAt, resumedAt, pausedAt, stripeSubId, stripeCusId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    periodUnit: ").append(toIndentedString(periodUnit)).append("\n");
    sb.append("    periodCount: ").append(toIndentedString(periodCount)).append("\n");
    sb.append("    periodStartsAt: ").append(toIndentedString(periodStartsAt)).append("\n");
    sb.append("    periodEndsAt: ").append(toIndentedString(periodEndsAt)).append("\n");
    sb.append("    anchoredAt: ").append(toIndentedString(anchoredAt)).append("\n");
    sb.append("    canceledAt: ").append(toIndentedString(canceledAt)).append("\n");
    sb.append("    resumedAt: ").append(toIndentedString(resumedAt)).append("\n");
    sb.append("    pausedAt: ").append(toIndentedString(pausedAt)).append("\n");
    sb.append("    stripeSubId: ").append(toIndentedString(stripeSubId)).append("\n");
    sb.append("    stripeCusId: ").append(toIndentedString(stripeCusId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subId");
    openapiFields.add("tier");
    openapiFields.add("status");
    openapiFields.add("currency");
    openapiFields.add("periodUnit");
    openapiFields.add("periodCount");
    openapiFields.add("periodStartsAt");
    openapiFields.add("periodEndsAt");
    openapiFields.add("anchoredAt");
    openapiFields.add("canceledAt");
    openapiFields.add("resumedAt");
    openapiFields.add("pausedAt");
    openapiFields.add("stripeSubId");
    openapiFields.add("stripeCusId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subId");
    openapiRequiredFields.add("tier");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("periodUnit");
    openapiRequiredFields.add("periodCount");
    openapiRequiredFields.add("periodStartsAt");
    openapiRequiredFields.add("periodEndsAt");
    openapiRequiredFields.add("anchoredAt");
    openapiRequiredFields.add("canceledAt");
    openapiRequiredFields.add("resumedAt");
    openapiRequiredFields.add("pausedAt");
    openapiRequiredFields.add("stripeSubId");
    openapiRequiredFields.add("stripeCusId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Subscription
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Subscription.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("subId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subId").toString()));
      }
      if (!jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("periodUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodUnit").toString()));
      }
      if (!jsonObj.get("stripeSubId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeSubId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeSubId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Subscription instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Subscription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Subscription
  * @throws IOException if the JSON string is invalid with respect to Subscription
  */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

 /**
  * Convert an instance of Subscription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

