/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsageSessionPublic
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsageSessionPublic {
  public static final String SERIALIZED_NAME_USAGE_SESSION_ID = "usageSessionId";
  @SerializedName(SERIALIZED_NAME_USAGE_SESSION_ID)
  private String usageSessionId;

  public static final String SERIALIZED_NAME_CLERK_ORG_ID = "clerkOrgId";
  @SerializedName(SERIALIZED_NAME_CLERK_ORG_ID)
  private Object clerkOrgId = null;

  public static final String SERIALIZED_NAME_CLERK_USER_ID = "clerkUserId";
  @SerializedName(SERIALIZED_NAME_CLERK_USER_ID)
  private Object clerkUserId = null;

  public static final String SERIALIZED_NAME_KEY_ID = "keyId";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private Object keyId = null;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
 public enum MethodEnum {
    API("api"),
    
    WS("ws");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PENDING("pending"),
    
    SUCCESS("success"),
    
    FAILURE("failure");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_MACHINE_ID = "machineId";
  @SerializedName(SERIALIZED_NAME_MACHINE_ID)
  private String machineId;

  public static final String SERIALIZED_NAME_MACHINE_REGION = "machineRegion";
  @SerializedName(SERIALIZED_NAME_MACHINE_REGION)
  private String machineRegion;

  /**
   * Gets or Sets browserType
   */
  @JsonAdapter(BrowserTypeEnum.Adapter.class)
 public enum BrowserTypeEnum {
    CHROMIUM("chromium"),
    
    FIREFOX("firefox"),
    
    WEBKIT("webkit"),
    
    CHROME("chrome"),
    
    CHROME_BETA("chrome-beta"),
    
    MSEDGE("msedge"),
    
    MSEDGE_BETA("msedge-beta"),
    
    MSEDGE_DEV("msedge-dev");

    private String value;

    BrowserTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrowserTypeEnum fromValue(String value) {
      for (BrowserTypeEnum b : BrowserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrowserTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrowserTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrowserTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrowserTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BROWSER_TYPE = "browserType";
  @SerializedName(SERIALIZED_NAME_BROWSER_TYPE)
  private BrowserTypeEnum browserType;

  public static final String SERIALIZED_NAME_BROWSER_VERSION = "browserVersion";
  @SerializedName(SERIALIZED_NAME_BROWSER_VERSION)
  private String browserVersion;

  /**
   * Gets or Sets agentType
   */
  @JsonAdapter(AgentTypeEnum.Adapter.class)
 public enum AgentTypeEnum {
    PLAYWRIGHT("playwright"),
    
    PUPPETEER("puppeteer"),
    
    SELENIUM("selenium");

    private String value;

    AgentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgentTypeEnum fromValue(String value) {
      for (AgentTypeEnum b : AgentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGENT_TYPE = "agentType";
  @SerializedName(SERIALIZED_NAME_AGENT_TYPE)
  private AgentTypeEnum agentType;

  public static final String SERIALIZED_NAME_AGENT_VERSION = "agentVersion";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION)
  private String agentVersion;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_ENDED_AT = "endedAt";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private Object endedAt = null;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public UsageSessionPublic() {
  }

  public UsageSessionPublic usageSessionId(String usageSessionId) {
    
    
    
    
    this.usageSessionId = usageSessionId;
    return this;
  }

   /**
   * Get usageSessionId
   * @return usageSessionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUsageSessionId() {
    return usageSessionId;
  }


  public void setUsageSessionId(String usageSessionId) {
    
    
    
    this.usageSessionId = usageSessionId;
  }


  public UsageSessionPublic clerkOrgId(Object clerkOrgId) {
    
    
    if (clerkOrgId != null && clerkOrgId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkOrgId. Length must be greater than or equal to 0.");
    }
    
    this.clerkOrgId = clerkOrgId;
    return this;
  }

   /**
   * Get clerkOrgId
   * @return clerkOrgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getClerkOrgId() {
    return clerkOrgId;
  }


  public void setClerkOrgId(Object clerkOrgId) {
    
    
    if (clerkOrgId != null && clerkOrgId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkOrgId. Length must be greater than or equal to 0.");
    }
    this.clerkOrgId = clerkOrgId;
  }


  public UsageSessionPublic clerkUserId(Object clerkUserId) {
    
    
    if (clerkUserId != null && clerkUserId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkUserId. Length must be greater than or equal to 0.");
    }
    
    this.clerkUserId = clerkUserId;
    return this;
  }

   /**
   * Get clerkUserId
   * @return clerkUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getClerkUserId() {
    return clerkUserId;
  }


  public void setClerkUserId(Object clerkUserId) {
    
    
    if (clerkUserId != null && clerkUserId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkUserId. Length must be greater than or equal to 0.");
    }
    this.clerkUserId = clerkUserId;
  }


  public UsageSessionPublic keyId(Object keyId) {
    
    
    
    
    this.keyId = keyId;
    return this;
  }

   /**
   * Get keyId
   * @return keyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getKeyId() {
    return keyId;
  }


  public void setKeyId(Object keyId) {
    
    
    
    this.keyId = keyId;
  }


  public UsageSessionPublic method(MethodEnum method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MethodEnum getMethod() {
    return method;
  }


  public void setMethod(MethodEnum method) {
    
    
    
    this.method = method;
  }


  public UsageSessionPublic endpoint(String endpoint) {
    
    
    
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(String endpoint) {
    
    
    
    this.endpoint = endpoint;
  }


  public UsageSessionPublic status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public UsageSessionPublic machineId(String machineId) {
    
    
    
    
    this.machineId = machineId;
    return this;
  }

   /**
   * Get machineId
   * @return machineId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getMachineId() {
    return machineId;
  }


  public void setMachineId(String machineId) {
    
    
    
    this.machineId = machineId;
  }


  public UsageSessionPublic machineRegion(String machineRegion) {
    
    
    
    
    this.machineRegion = machineRegion;
    return this;
  }

   /**
   * Get machineRegion
   * @return machineRegion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getMachineRegion() {
    return machineRegion;
  }


  public void setMachineRegion(String machineRegion) {
    
    
    
    this.machineRegion = machineRegion;
  }


  public UsageSessionPublic browserType(BrowserTypeEnum browserType) {
    
    
    
    
    this.browserType = browserType;
    return this;
  }

   /**
   * Get browserType
   * @return browserType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BrowserTypeEnum getBrowserType() {
    return browserType;
  }


  public void setBrowserType(BrowserTypeEnum browserType) {
    
    
    
    this.browserType = browserType;
  }


  public UsageSessionPublic browserVersion(String browserVersion) {
    
    
    
    
    this.browserVersion = browserVersion;
    return this;
  }

   /**
   * Get browserVersion
   * @return browserVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getBrowserVersion() {
    return browserVersion;
  }


  public void setBrowserVersion(String browserVersion) {
    
    
    
    this.browserVersion = browserVersion;
  }


  public UsageSessionPublic agentType(AgentTypeEnum agentType) {
    
    
    
    
    this.agentType = agentType;
    return this;
  }

   /**
   * Get agentType
   * @return agentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AgentTypeEnum getAgentType() {
    return agentType;
  }


  public void setAgentType(AgentTypeEnum agentType) {
    
    
    
    this.agentType = agentType;
  }


  public UsageSessionPublic agentVersion(String agentVersion) {
    
    
    
    
    this.agentVersion = agentVersion;
    return this;
  }

   /**
   * Get agentVersion
   * @return agentVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAgentVersion() {
    return agentVersion;
  }


  public void setAgentVersion(String agentVersion) {
    
    
    
    this.agentVersion = agentVersion;
  }


  public UsageSessionPublic startedAt(OffsetDateTime startedAt) {
    
    
    
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    
    
    
    this.startedAt = startedAt;
  }


  public UsageSessionPublic endedAt(Object endedAt) {
    
    
    
    
    this.endedAt = endedAt;
    return this;
  }

   /**
   * Get endedAt
   * @return endedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getEndedAt() {
    return endedAt;
  }


  public void setEndedAt(Object endedAt) {
    
    
    
    this.endedAt = endedAt;
  }


  public UsageSessionPublic sessionId(String sessionId) {
    
    
    
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * UsageSession ID
   * @return sessionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "UsageSession ID")

  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    
    
    
    this.sessionId = sessionId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsageSessionPublic instance itself
   */
  public UsageSessionPublic putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageSessionPublic usageSessionPublic = (UsageSessionPublic) o;
    return Objects.equals(this.usageSessionId, usageSessionPublic.usageSessionId) &&
        Objects.equals(this.clerkOrgId, usageSessionPublic.clerkOrgId) &&
        Objects.equals(this.clerkUserId, usageSessionPublic.clerkUserId) &&
        Objects.equals(this.keyId, usageSessionPublic.keyId) &&
        Objects.equals(this.method, usageSessionPublic.method) &&
        Objects.equals(this.endpoint, usageSessionPublic.endpoint) &&
        Objects.equals(this.status, usageSessionPublic.status) &&
        Objects.equals(this.machineId, usageSessionPublic.machineId) &&
        Objects.equals(this.machineRegion, usageSessionPublic.machineRegion) &&
        Objects.equals(this.browserType, usageSessionPublic.browserType) &&
        Objects.equals(this.browserVersion, usageSessionPublic.browserVersion) &&
        Objects.equals(this.agentType, usageSessionPublic.agentType) &&
        Objects.equals(this.agentVersion, usageSessionPublic.agentVersion) &&
        Objects.equals(this.startedAt, usageSessionPublic.startedAt) &&
        Objects.equals(this.endedAt, usageSessionPublic.endedAt) &&
        Objects.equals(this.sessionId, usageSessionPublic.sessionId)&&
        Objects.equals(this.additionalProperties, usageSessionPublic.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usageSessionId, clerkOrgId, clerkUserId, keyId, method, endpoint, status, machineId, machineRegion, browserType, browserVersion, agentType, agentVersion, startedAt, endedAt, sessionId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageSessionPublic {\n");
    sb.append("    usageSessionId: ").append(toIndentedString(usageSessionId)).append("\n");
    sb.append("    clerkOrgId: ").append(toIndentedString(clerkOrgId)).append("\n");
    sb.append("    clerkUserId: ").append(toIndentedString(clerkUserId)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    machineId: ").append(toIndentedString(machineId)).append("\n");
    sb.append("    machineRegion: ").append(toIndentedString(machineRegion)).append("\n");
    sb.append("    browserType: ").append(toIndentedString(browserType)).append("\n");
    sb.append("    browserVersion: ").append(toIndentedString(browserVersion)).append("\n");
    sb.append("    agentType: ").append(toIndentedString(agentType)).append("\n");
    sb.append("    agentVersion: ").append(toIndentedString(agentVersion)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("usageSessionId");
    openapiFields.add("clerkOrgId");
    openapiFields.add("clerkUserId");
    openapiFields.add("keyId");
    openapiFields.add("method");
    openapiFields.add("endpoint");
    openapiFields.add("status");
    openapiFields.add("machineId");
    openapiFields.add("machineRegion");
    openapiFields.add("browserType");
    openapiFields.add("browserVersion");
    openapiFields.add("agentType");
    openapiFields.add("agentVersion");
    openapiFields.add("startedAt");
    openapiFields.add("endedAt");
    openapiFields.add("sessionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("usageSessionId");
    openapiRequiredFields.add("clerkOrgId");
    openapiRequiredFields.add("clerkUserId");
    openapiRequiredFields.add("keyId");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("machineId");
    openapiRequiredFields.add("machineRegion");
    openapiRequiredFields.add("browserType");
    openapiRequiredFields.add("browserVersion");
    openapiRequiredFields.add("agentType");
    openapiRequiredFields.add("agentVersion");
    openapiRequiredFields.add("startedAt");
    openapiRequiredFields.add("endedAt");
    openapiRequiredFields.add("sessionId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsageSessionPublic
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsageSessionPublic.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageSessionPublic is not found in the empty JSON string", UsageSessionPublic.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsageSessionPublic.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("usageSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageSessionId").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("machineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineId").toString()));
      }
      if (!jsonObj.get("machineRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineRegion").toString()));
      }
      if (!jsonObj.get("browserType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserType").toString()));
      }
      if (!jsonObj.get("browserVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserVersion").toString()));
      }
      if (!jsonObj.get("agentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentType").toString()));
      }
      if (!jsonObj.get("agentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentVersion").toString()));
      }
      if (!jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageSessionPublic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageSessionPublic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageSessionPublic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageSessionPublic.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageSessionPublic>() {
           @Override
           public void write(JsonWriter out, UsageSessionPublic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageSessionPublic read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsageSessionPublic instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsageSessionPublic given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsageSessionPublic
  * @throws IOException if the JSON string is invalid with respect to UsageSessionPublic
  */
  public static UsageSessionPublic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageSessionPublic.class);
  }

 /**
  * Convert an instance of UsageSessionPublic to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

