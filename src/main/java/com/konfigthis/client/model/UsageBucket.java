/*
 * BrowserCat API
 * Providing purr-fect headless browser access via utility endpoints and direct websocket connections.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@browsercat.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsageBucket
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsageBucket {
  public static final String SERIALIZED_NAME_USAGE_BUCKET_ID = "usageBucketId";
  @SerializedName(SERIALIZED_NAME_USAGE_BUCKET_ID)
  private String usageBucketId;

  public static final String SERIALIZED_NAME_KEY_ID = "keyId";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private Object keyId = null;

  public static final String SERIALIZED_NAME_CLERK_ORG_ID = "clerkOrgId";
  @SerializedName(SERIALIZED_NAME_CLERK_ORG_ID)
  private Object clerkOrgId = null;

  public static final String SERIALIZED_NAME_CLERK_USER_ID = "clerkUserId";
  @SerializedName(SERIALIZED_NAME_CLERK_USER_ID)
  private Object clerkUserId = null;

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private OffsetDateTime bucket;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
 public enum MethodEnum {
    API("api"),
    
    WS("ws");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private Integer credits;

  public static final String SERIALIZED_NAME_COUNT_SUCCESS = "countSuccess";
  @SerializedName(SERIALIZED_NAME_COUNT_SUCCESS)
  private Integer countSuccess;

  public static final String SERIALIZED_NAME_COUNT_FAILURE = "countFailure";
  @SerializedName(SERIALIZED_NAME_COUNT_FAILURE)
  private Integer countFailure;

  public static final String SERIALIZED_NAME_DURATION_SUCCESS = "durationSuccess";
  @SerializedName(SERIALIZED_NAME_DURATION_SUCCESS)
  private Integer durationSuccess;

  public static final String SERIALIZED_NAME_DURATION_FAILURE = "durationFailure";
  @SerializedName(SERIALIZED_NAME_DURATION_FAILURE)
  private Integer durationFailure;

  public static final String SERIALIZED_NAME_DURATION_MIN = "durationMin";
  @SerializedName(SERIALIZED_NAME_DURATION_MIN)
  private Integer durationMin;

  public static final String SERIALIZED_NAME_DURATION_MAX = "durationMax";
  @SerializedName(SERIALIZED_NAME_DURATION_MAX)
  private Integer durationMax;

  public static final String SERIALIZED_NAME_DURATION_MEAN = "durationMean";
  @SerializedName(SERIALIZED_NAME_DURATION_MEAN)
  private Integer durationMean;

  public static final String SERIALIZED_NAME_DURATION_STD = "durationStd";
  @SerializedName(SERIALIZED_NAME_DURATION_STD)
  private Integer durationStd;

  public UsageBucket() {
  }

  public UsageBucket usageBucketId(String usageBucketId) {
    
    
    
    
    this.usageBucketId = usageBucketId;
    return this;
  }

   /**
   * Get usageBucketId
   * @return usageBucketId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUsageBucketId() {
    return usageBucketId;
  }


  public void setUsageBucketId(String usageBucketId) {
    
    
    
    this.usageBucketId = usageBucketId;
  }


  public UsageBucket keyId(Object keyId) {
    
    
    
    
    this.keyId = keyId;
    return this;
  }

   /**
   * Get keyId
   * @return keyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getKeyId() {
    return keyId;
  }


  public void setKeyId(Object keyId) {
    
    
    
    this.keyId = keyId;
  }


  public UsageBucket clerkOrgId(Object clerkOrgId) {
    
    
    if (clerkOrgId != null && clerkOrgId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkOrgId. Length must be greater than or equal to 0.");
    }
    
    this.clerkOrgId = clerkOrgId;
    return this;
  }

   /**
   * Get clerkOrgId
   * @return clerkOrgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getClerkOrgId() {
    return clerkOrgId;
  }


  public void setClerkOrgId(Object clerkOrgId) {
    
    
    if (clerkOrgId != null && clerkOrgId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkOrgId. Length must be greater than or equal to 0.");
    }
    this.clerkOrgId = clerkOrgId;
  }


  public UsageBucket clerkUserId(Object clerkUserId) {
    
    
    if (clerkUserId != null && clerkUserId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkUserId. Length must be greater than or equal to 0.");
    }
    
    this.clerkUserId = clerkUserId;
    return this;
  }

   /**
   * Get clerkUserId
   * @return clerkUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getClerkUserId() {
    return clerkUserId;
  }


  public void setClerkUserId(Object clerkUserId) {
    
    
    if (clerkUserId != null && clerkUserId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for clerkUserId. Length must be greater than or equal to 0.");
    }
    this.clerkUserId = clerkUserId;
  }


  public UsageBucket bucket(OffsetDateTime bucket) {
    
    
    
    
    this.bucket = bucket;
    return this;
  }

   /**
   * Get bucket
   * @return bucket
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getBucket() {
    return bucket;
  }


  public void setBucket(OffsetDateTime bucket) {
    
    
    
    this.bucket = bucket;
  }


  public UsageBucket method(MethodEnum method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MethodEnum getMethod() {
    return method;
  }


  public void setMethod(MethodEnum method) {
    
    
    
    this.method = method;
  }


  public UsageBucket endpoint(String endpoint) {
    
    
    
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(String endpoint) {
    
    
    
    this.endpoint = endpoint;
  }


  public UsageBucket credits(Integer credits) {
    
    
    
    
    this.credits = credits;
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCredits() {
    return credits;
  }


  public void setCredits(Integer credits) {
    
    
    
    this.credits = credits;
  }


  public UsageBucket countSuccess(Integer countSuccess) {
    
    
    
    
    this.countSuccess = countSuccess;
    return this;
  }

   /**
   * Get countSuccess
   * @return countSuccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCountSuccess() {
    return countSuccess;
  }


  public void setCountSuccess(Integer countSuccess) {
    
    
    
    this.countSuccess = countSuccess;
  }


  public UsageBucket countFailure(Integer countFailure) {
    
    
    
    
    this.countFailure = countFailure;
    return this;
  }

   /**
   * Get countFailure
   * @return countFailure
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCountFailure() {
    return countFailure;
  }


  public void setCountFailure(Integer countFailure) {
    
    
    
    this.countFailure = countFailure;
  }


  public UsageBucket durationSuccess(Integer durationSuccess) {
    
    
    
    
    this.durationSuccess = durationSuccess;
    return this;
  }

   /**
   * Get durationSuccess
   * @return durationSuccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDurationSuccess() {
    return durationSuccess;
  }


  public void setDurationSuccess(Integer durationSuccess) {
    
    
    
    this.durationSuccess = durationSuccess;
  }


  public UsageBucket durationFailure(Integer durationFailure) {
    
    
    
    
    this.durationFailure = durationFailure;
    return this;
  }

   /**
   * Get durationFailure
   * @return durationFailure
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDurationFailure() {
    return durationFailure;
  }


  public void setDurationFailure(Integer durationFailure) {
    
    
    
    this.durationFailure = durationFailure;
  }


  public UsageBucket durationMin(Integer durationMin) {
    
    
    
    
    this.durationMin = durationMin;
    return this;
  }

   /**
   * Get durationMin
   * @return durationMin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDurationMin() {
    return durationMin;
  }


  public void setDurationMin(Integer durationMin) {
    
    
    
    this.durationMin = durationMin;
  }


  public UsageBucket durationMax(Integer durationMax) {
    
    
    
    
    this.durationMax = durationMax;
    return this;
  }

   /**
   * Get durationMax
   * @return durationMax
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDurationMax() {
    return durationMax;
  }


  public void setDurationMax(Integer durationMax) {
    
    
    
    this.durationMax = durationMax;
  }


  public UsageBucket durationMean(Integer durationMean) {
    
    
    
    
    this.durationMean = durationMean;
    return this;
  }

   /**
   * Get durationMean
   * @return durationMean
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDurationMean() {
    return durationMean;
  }


  public void setDurationMean(Integer durationMean) {
    
    
    
    this.durationMean = durationMean;
  }


  public UsageBucket durationStd(Integer durationStd) {
    
    
    
    
    this.durationStd = durationStd;
    return this;
  }

   /**
   * Get durationStd
   * @return durationStd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDurationStd() {
    return durationStd;
  }


  public void setDurationStd(Integer durationStd) {
    
    
    
    this.durationStd = durationStd;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsageBucket instance itself
   */
  public UsageBucket putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageBucket usageBucket = (UsageBucket) o;
    return Objects.equals(this.usageBucketId, usageBucket.usageBucketId) &&
        Objects.equals(this.keyId, usageBucket.keyId) &&
        Objects.equals(this.clerkOrgId, usageBucket.clerkOrgId) &&
        Objects.equals(this.clerkUserId, usageBucket.clerkUserId) &&
        Objects.equals(this.bucket, usageBucket.bucket) &&
        Objects.equals(this.method, usageBucket.method) &&
        Objects.equals(this.endpoint, usageBucket.endpoint) &&
        Objects.equals(this.credits, usageBucket.credits) &&
        Objects.equals(this.countSuccess, usageBucket.countSuccess) &&
        Objects.equals(this.countFailure, usageBucket.countFailure) &&
        Objects.equals(this.durationSuccess, usageBucket.durationSuccess) &&
        Objects.equals(this.durationFailure, usageBucket.durationFailure) &&
        Objects.equals(this.durationMin, usageBucket.durationMin) &&
        Objects.equals(this.durationMax, usageBucket.durationMax) &&
        Objects.equals(this.durationMean, usageBucket.durationMean) &&
        Objects.equals(this.durationStd, usageBucket.durationStd)&&
        Objects.equals(this.additionalProperties, usageBucket.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usageBucketId, keyId, clerkOrgId, clerkUserId, bucket, method, endpoint, credits, countSuccess, countFailure, durationSuccess, durationFailure, durationMin, durationMax, durationMean, durationStd, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageBucket {\n");
    sb.append("    usageBucketId: ").append(toIndentedString(usageBucketId)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    clerkOrgId: ").append(toIndentedString(clerkOrgId)).append("\n");
    sb.append("    clerkUserId: ").append(toIndentedString(clerkUserId)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    countSuccess: ").append(toIndentedString(countSuccess)).append("\n");
    sb.append("    countFailure: ").append(toIndentedString(countFailure)).append("\n");
    sb.append("    durationSuccess: ").append(toIndentedString(durationSuccess)).append("\n");
    sb.append("    durationFailure: ").append(toIndentedString(durationFailure)).append("\n");
    sb.append("    durationMin: ").append(toIndentedString(durationMin)).append("\n");
    sb.append("    durationMax: ").append(toIndentedString(durationMax)).append("\n");
    sb.append("    durationMean: ").append(toIndentedString(durationMean)).append("\n");
    sb.append("    durationStd: ").append(toIndentedString(durationStd)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("usageBucketId");
    openapiFields.add("keyId");
    openapiFields.add("clerkOrgId");
    openapiFields.add("clerkUserId");
    openapiFields.add("bucket");
    openapiFields.add("method");
    openapiFields.add("endpoint");
    openapiFields.add("credits");
    openapiFields.add("countSuccess");
    openapiFields.add("countFailure");
    openapiFields.add("durationSuccess");
    openapiFields.add("durationFailure");
    openapiFields.add("durationMin");
    openapiFields.add("durationMax");
    openapiFields.add("durationMean");
    openapiFields.add("durationStd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("usageBucketId");
    openapiRequiredFields.add("keyId");
    openapiRequiredFields.add("clerkOrgId");
    openapiRequiredFields.add("clerkUserId");
    openapiRequiredFields.add("bucket");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("credits");
    openapiRequiredFields.add("countSuccess");
    openapiRequiredFields.add("countFailure");
    openapiRequiredFields.add("durationSuccess");
    openapiRequiredFields.add("durationFailure");
    openapiRequiredFields.add("durationMin");
    openapiRequiredFields.add("durationMax");
    openapiRequiredFields.add("durationMean");
    openapiRequiredFields.add("durationStd");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsageBucket
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsageBucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageBucket is not found in the empty JSON string", UsageBucket.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsageBucket.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("usageBucketId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageBucketId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageBucketId").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageBucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageBucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageBucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageBucket.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageBucket>() {
           @Override
           public void write(JsonWriter out, UsageBucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageBucket read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsageBucket instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsageBucket given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsageBucket
  * @throws IOException if the JSON string is invalid with respect to UsageBucket
  */
  public static UsageBucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageBucket.class);
  }

 /**
  * Convert an instance of UsageBucket to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

